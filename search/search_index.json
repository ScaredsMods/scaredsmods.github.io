{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Scaredsmods' documentation","text":"<p>Go back to the main site scaredsmods.github.io.</p>"},{"location":"#what-youll-find-here","title":"What you'll find here","text":"<ul> <li>All docs for mods</li> <li>All docs for plugins</li> </ul>"},{"location":"#go-to","title":"Go to","text":"<ul> <li>Mods</li> <li>Plugins</li> <li>Credits</li> </ul>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#thanks-to","title":"Thanks to:","text":"<ul> <li>MkDocs for providing the documentation base</li> </ul>"},{"location":"mods/","title":"All available mods","text":""},{"location":"mods/#standalone-mods","title":"Standalone mods","text":""},{"location":"mods/#library-and-api","title":"Library and API","text":""},{"location":"mods/#more-outputs-api","title":"More Outputs API","text":"<p>What is this mod? This mod is a small, but powerful library allowing developers to add recipes containing more than one output as vanilla source does not provide a way to do that. It consists of 3 classes, allowing for 2, 3 or 4 outputs. I might add more, but at some point it isnt worth it to add more.</p> To DO When Active Development Make it one class that allows all possible amounts of outputs Some time No <p>DISCLAIMER: I have only tested Kaupenjoe's way of registering custom Recipes. Other ways might work, but not ones I know of. I kindly ask to report other ways, bugs or issues to the github repository. Please use the correct lable depending on your report.</p>"},{"location":"mods/more-outputs-api/","title":"More Ouputs API","text":""},{"location":"mods/more-outputs-api/#version-scheme-for-more-outputs-api","title":"Version scheme for More Outputs API","text":"<p>Note: it isnt worth backporting to version prior to 1.18 and certainly not prior to 1.14 so those versions won't be backported. Where <code>x</code> stands for the update of the mod &amp; <code>y</code> stands for minecraft version suffix and/or bugfixes. </p> Minecraft Version Mod Version Mod Loader Status &lt; 1.18 - Fabric skipped 1.18.x 0.2.y Fabric in development 1.19.x 0.5.y Fabric in development 1.20.x 1.x.y Fabric current version 1.21.x 2.x.y Fabric to be updated"},{"location":"mods/more-outputs-api/#usage","title":"Usage","text":"<p>I would assume that you already know most of the things we are about to do, but for those that don't know, here is the tutorial!</p>"},{"location":"mods/more-outputs-api/#what-well-need","title":"What we'll need","text":"<ul> <li>A custom block</li> <li>A (custom) block entity</li> <li>A custom recipe of course</li> <li>A screenhandler for the block entity</li> </ul>"},{"location":"mods/more-outputs-api/#block-entity","title":"Block (Entity)","text":"<p>You can call the classes and packages whatever you want, I will call them <code>block</code>, <code>block/entities</code> and <code>block/custom</code>. Start by creating a class I will call <code>ExampleBlock</code> in the <code>block/custom</code> package. That class should look something like this: <pre><code>public class SomeBlock extends BlockWithEntity implements BlockEntityProvider {\n    private static final VoxelShape SHAPE = Block.createCuboidShape(0, 0, 0, 16, 12, 16);\n\n    public static final MapCodec&lt;SomeBlock&gt; CODEC = SomeBlock.createCodec(SomeBlock::new);\n\n    public SomeBlock(Settings settings) {\n        super(settings);\n    }\n\n    @Override\n    protected MapCodec&lt;? extends BlockWithEntity&gt; getCodec() {\n        return CODEC;\n    }\n\n    @Override\n    public VoxelShape getOutlineShape(BlockState state, BlockView world, BlockPos pos, ShapeContext context) {\n        return SHAPE;\n    }\n\n    @Override\n    public BlockRenderType getRenderType(BlockState state) {\n        return BlockRenderType.MODEL;\n    }\n\n    @Nullable\n    @Override\n    public BlockEntity createBlockEntity(BlockPos pos, BlockState state) {\n        return new SomeBlockBlockEntity(pos, state); // (1) \n    }\n\n    @Override\n    public void onStateReplaced(BlockState state, World world, BlockPos pos, BlockState newState, boolean moved) {\n        if (state.getBlock() != newState.getBlock()) {\n            BlockEntity blockEntity = world.getBlockEntity(pos);\n            if (blockEntity instanceof SomeBlockBlockEntity) { // (2) \n                ItemScatterer.spawn(world, pos, (SomeBlockBlockEntity)blockEntity); // (3)\n                world.updateComparators(pos,this);\n            }\n            super.onStateReplaced(state, world, pos, newState, moved);\n        }\n    }\n\n\n\n    @Override\n    public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {\n        if (!world.isClient) {\n            NamedScreenHandlerFactory screenHandlerFactory = ((GemPolishingStationBlockEntity) world.getBlockEntity(pos)); // (4)\n\n            if (screenHandlerFactory != null) {\n                player.openHandledScreen(screenHandlerFactory);\n            }\n        }\n\n        return ActionResult.SUCCESS;\n    }\n\n    @Nullable\n    @Override\n    public &lt;T extends BlockEntity&gt; BlockEntityTicker&lt;T&gt; getTicker(World world, BlockState state, BlockEntityType&lt;T&gt; type) {\n        return validateTicker(type, ModBlockEntities.GEM_POLISHING_STATION_BLOCK_ENTITY, // (5)\n                (world1, pos, state1, blockEntity) -&gt; blockEntity.tick(world1, pos, state1));\n    }\n}\n</code></pre></p> <ol> <li>\u274c Here should be an error present, as we haven't made that class yet</li> <li>\u274c Here should be an error present, as we haven't made that class yet</li> <li>\u274c Here should be an error present, as we haven't made that class yet</li> <li>\u274c Here should be an error present, as we haven't made that class yet</li> <li>\u274c Here should be an error present, as we haven't made that class yet</li> </ol> <p>Now we can create the <code>ModBlocks</code> class in the <code>block</code> package. For this to work, in your main class, in this case <code>Main</code> there should be a field like this: </p> <pre><code>public static final Logger LOGGER = LoggerFactory.getLogger(\"yourmodid\");\n</code></pre> <pre><code>public class ModBlocks {\n\n    public static final Block SOME_BLOCK = registerBlock(\"example_block\",\n        new SomeBlock(FabricBlockSettings.copyOf(Blocks.IRON_BLOCK).nonOpaque()));\n\n    private static Block registerBlock(String name, Block block) {\n        registerBlockItem(name, block);\n        return Registry.register(Registries.BLOCK, new Identifier(Main.MOD_ID, name), block);\n    }\n\n    private static Item registerBlockItem(String name, Block block) {\n        return Registry.register(Registries.ITEM, new Identifier(Main.MOD_ID, name),\n            new BlockItem(block, new FabricItemSettings()));\n    }\n\n    public static void registerModBlocks() {\n        Main.LOGGER.info(\"Registering ModBlocks for \" + Main.MOD_ID); // (1)\n    }\n}\n</code></pre> <ol> <li>This method can be empty and is recommended for large projects</li> </ol> <p>Test test</p>"},{"location":"plugins/","title":"All available plugins","text":""},{"location":"plugins/#standalone-plugins","title":"Standalone plugins","text":""},{"location":"plugins/#minibosses","title":"MiniBosses","text":""},{"location":"plugins/#library-plugins","title":"Library plugins","text":""},{"location":"plugins/#subcommandlib","title":"SubCommandLib","text":"<p>SubCommandLib is an easy to use development library aimed to help developers make subcommands faster and better.  Click here to get started (or on the header above) with SubCommandLib.</p> <p>Features:</p> <ul> <li>Completely customizeable by overriding methods</li> <li>The ability to choose between tabcompletion and no tab completion</li> </ul> <p>Credits:</p> <p>All credits go to @KodySimpson on youtube for providing the code. I turned it into a library for developers to use</p>"},{"location":"plugins/subcommandlib/","title":"SubCommandLib","text":""},{"location":"plugins/subcommandlib/#getting-started","title":"Getting started","text":"<p>What are subcommands you might ask? Subcommands are commands that are registered after a main, central command. Think of them as arguments of a command that are a commands themselves. Ex: <code>/deluxehub reload</code></p> <p>To get started with subcommand lib you need to either do 1 or 2 depending on your build system:</p>"},{"location":"plugins/subcommandlib/#gradle","title":"Gradle","text":"<p><pre><code>//This should be at the top repository block\nmaven {\n   url \"https://repo.repsy.io/mvn/scaredrabbit/scaredsplugins\"\n}\n</code></pre> <pre><code>//This should be in the dependencies block of your build.gradle\nmodImplementation \"io.github.scaredsplugins:SubCommandLib:${project.subcommandlib_version}\"\n</code></pre> Note: <pre><code>${project.subcommandlib_version}\n</code></pre> Is completely optional and is not neccessary at all, just for convenience of easier version swapping. If you do decide to do this, you should add this to your <code>gradle.properties</code>: <pre><code>//{VERSION} is the version you chose on curseforge/github (Modrinth coming soon)\nsubcommandlib_version = {VERSION}\n</code></pre></p>"},{"location":"plugins/subcommandlib/#maven","title":"Maven","text":"<p><pre><code> &lt;repository&gt;\n    &lt;id&gt;repsy&lt;/id&gt;\n    &lt;url&gt;https://repo.repsy.io/mvn/scaredrabbit/scaredsmods&lt;/url&gt;\n &lt;/repository&gt;\n</code></pre> <pre><code> &lt;dependency&gt;\n   &lt;groupId&gt;io.github.scaredsplugins&lt;/groupId&gt;\n   &lt;artifactId&gt;SubCommandLib&lt;/artifactId&gt;\n   &lt;version&gt;{VERSION}&lt;/version&gt;\n &lt;/dependency&gt;\n</code></pre> {VERSION} is the version you chose on curseforge/github (Modrinth coming soon)</p>"},{"location":"plugins/subcommandlib/#adding-subcommands","title":"Adding Subcommands","text":""},{"location":"plugins/subcommandlib/#preparation","title":"Preparation","text":"<p>Before you can add a subcommand, you need to have a central manager that collects all subcommmands Create a new class and let it extend either extends <code>CommandManager</code> or <code>TabCompletionCommandManager</code>. The difference is that <code>TabCompletionCommandManager</code> subcommands are visible when typing them in the chat.  Create a new, empty constructor. Ex.:</p> <pre><code>public class SomeManager extends TabCompletionCommandManager {\n\n    public SomeManager() {\n\n    }\n}\n</code></pre>"},{"location":"plugins/subcommandlib/#making-new-subcommands","title":"Making new subcommands","text":"<p>Then create a new class <code>SomeCommand.java</code> and make it extend <code>SubCommand</code>. Implement all the neccessary methods your IDE asks for. It should look something like this:</p> <p><pre><code>import io.github.scaredsplugins.subcommandlib.api.command.SubCommand;\nimport org.bukkit.entity.Player;\n\nimport java.util.List;\n\npublic class TestCommand extends SubCommand {\n    @Override\n    public String getName() {\n        return \"\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"\";\n    }\n\n    @Override\n    public String getSyntax() {\n        return \"\";\n    }\n\n    @Override\n    public void perform(Player player, String[] strings) {\n\n\n    }\n\n    @Override\n    public List&lt;String&gt; getSubcommandArguments(Player player, String[] strings) {\n        return null;\n    }\n}\n</code></pre> Remember that the default return value of <code>getSubcommandArguments(Player, player, String[] strings)</code> is <code>List.of()</code>. If you don't plan on adding arguments for the subcommands, let <code>getSubcommandArguments(Player, player, String[] strings)</code> return <code>null</code>.</p> <ul> <li>The <code>getName()</code> should return a string containing the name of your *subcommand*</li> <li>The <code>getDescription()</code> is the description of the command that will appear when doing /help</li> <li>The <code>getSyntax()</code> method is what you get sent in chat when entering the command wrong or when doing /help. Generally: How the command should be used.</li> <li>The <code>perform()</code> method is what will be executed when the subcommand is run. For example: <code>/example reload</code> reloads the <code>example</code> plugin configs.</li> </ul>"},{"location":"plugins/subcommandlib/#registering-the-main-command","title":"Registering the main command","text":"<p>The last two things you need to is:</p> <ol> <li> <p>Register the subcommand to the Manager class</p> </li> <li> <p>Register the main command</p> </li> </ol> <p>To register the subcommand to the command, return to the class you created at the beginning. In the constructor add this:</p> <p><pre><code>getSubCommands().add(new TestCommand());\n</code></pre> The manager class should look a bit like this:</p> <p><pre><code>public class SomeManager extends TabCompletionCommandManager {\n\n    public Manager() {\n        getSubCommands().add(new TestCommand());\n        [... Any other subcommands ...]\n    }\n}\n</code></pre> <code>getSubCommands()</code> is a method that returns a ArrayList and adds them to the <code>TabCompletionCommandManager</code> because we extend from that class.  <p>To register the main command, go to the class that extends <code>JavaPlugin</code>. In the <code>onEnable()</code> method, you should add <code>getCommand(\"example\").setExecutor(new SomeManager());</code>.</p> <ul> <li>example should be the first command you type in. Ex.: <code>/dhub</code></li> <li>by doing <code>new SomeManager()</code> we simply say: Hey server, here you have a class that can execute multiple commands. As specified above, in the constructor the subcommands are added to the constructor. So by calling the constructor, you basically say that all the subcommands should be added alongside the main command.</li> </ul> <p>The last to do will be adding the command to the <code>plugin.yml</code> file Go to <code>resources/plugin.yml</code>, and add this (you probably already know this, and should know it):</p> <p><pre><code>commands:\n  example:\n    description: Example\n</code></pre> <code>example</code> should be the string you provided in <code>onEnable()</code></p>"},{"location":"plugins/subcommandlib/#finishing-up","title":"Finishing up","text":"<p>Repeat these steps for more subcommands</p> <p>Have a question? You are allowed to ask questions in the issues of the github repository. Or DM me on discord, my username is <code>scaredrabbitnl_</code></p>"},{"location":"version-schemes/","title":"Version Schemes","text":""},{"location":"version-schemes/#version-schemes-for-the-mods","title":"Version schemes for the mods","text":"<p>Note: it isnt worth backporting to version prior to 1.18 and certainly not prior to 1.14 so those versions won't be backported. All my mods follow this general version scheme. If it is different for some mod, it will be listed at their page.</p> Minecraft Version Mod Version &lt; 1.18 - 1.18.x 0.2.x 1.19.x 0.5.x 1.20.x 1.x.x 1.21.x 2.x.x"},{"location":"version-schemes/#version-schemes-for-the-plugins","title":"Version schemes for the plugins","text":"<p>Plugins are mostly compatible with older versions, or future versions. Any changes required will be listed</p> Minecraft Version Plugin version &lt; 1.18 legacy, not supported but probably possible 1.18 0.2.x 1.19 0.5.x 1.20 1.0.x 1.21 2.0.x"}]}